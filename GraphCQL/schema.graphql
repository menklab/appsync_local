type Child {
  created: String
  description: String
  id: ID!
  isActive: Boolean
  lastModified: String
  name: String!
  #  rooms that the child may be in
  rooms(limit: Int, nextToken: String): RoomConnection
  version: Int
}

type ChildConnection {
  items: [Child]
  nextToken: String
}

type ChildRoom {
  childId: ID!
  id: ID!
  roomId: ID!
}

type Mutation {
  #  add child to room.
  addChildToRoom(content: String!, createdAt: String!, eventId: ID!): Child
  #  Create a single child.
  createChild(description: String, name: String!): Child
  #  Delete a single child by id.
  deleteChild(id: ID!): Child
  #  Update Child
  updateChild(description: String, id: ID!, isActive: Boolean, name: String!): Child
}

type Query {
  #  Get a single child by id.
  getChild(id: ID!): Child
  #  Paginate through children.
  listChildren(limit: Int, nextToken: String): ChildConnection
}

type Room {
  #  children that may be in room
  children(limit: Int, nextToken: String): ChildConnection
  created: String!
  description: String
  id: ID!
  isActive: Boolean
  lastModified: String!
  name: String!
  version: Int!
}

type RoomConnection {
  items: [Room]
  nextToken: String
}
